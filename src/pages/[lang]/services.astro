---
import Layout from '@layouts/Page.astro';

import {
	getLangFromUrl,
	getStaticLangPaths,
	useTranslations,
} from '@i18n/utils';
import Container from '@components/core/Container.astro';
import Chip from '@components/Chip.astro';
import { Langs } from '@i18n/ui';
import SectionHero from '@components/SectionHero.astro';
import { generateSlug } from '@utils/helpers';
import Button from '@components/buttons/Button.astro';
import { SERVICES } from '@config/company';
import ServiceCard from '@components/ServiceCard.astro';

export function getStaticPaths() {
	return getStaticLangPaths();
}
const lang: Langs = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<Layout>
	<SectionHero id="services-hero">
		{
			lang === 'eu' ? (
				<h1 slot="title">
					Gure <span class="hero-section__remark">fisioterapia</span> zerbitzuak
				</h1>
			) : (
				<h1 slot="title">
					Nuestros servicios de{' '}
					<span class="hero-section__remark">fisioterapia</span>
				</h1>
			)
		}
		<Fragment slot="desc">
			{SERVICES[lang].intro}
		</Fragment>
		<div slot="chips" class="carousel">
			<div class="group">
				{
					SERVICES[lang].sections.map(service => {
						const hash = generateSlug(service.title);
						return <Chip href={`#${hash}`} text={service.title} />;
					})
				}
			</div>
			<div aria-hidden="true" class="group">
				{
					SERVICES[lang].sections.map(service => {
						return <Chip text={service.title} />;
					})
				}
			</div>
		</div>
	</SectionHero>
	<Container class="services-grid" tag="section">
		{
			SERVICES[lang].sections.map((section, idx) => {
				const isEven = idx % 2 === 0;

				return <ServiceCard section={section} isEven={isEven} />;
			})
		}
	</Container>
	<Button class="services-cta" href={`/${lang}/contact`}>
		{t('nav.contact')}
	</Button>
</Layout>

<style>
	ul {
		margin: 0;
		padding: 0;
	}
	li {
		list-style: none;
	}

	.services-list__container {
		display: flex;
		flex-direction: column;
		gap: 2.5em;
	}

	.services-cta {
		margin: var(--s6) 0;
		padding: var(--s4) var(--s7);
		margin-left: auto;
		margin-right: auto;
	}

	.services-cta__btn:hover {
		background: var(--theme-primary-hover);
	}

	.services-grid {
		display: grid;
		gap: var(--s7);
		margin-top: var(--s5);
	}

	.group[aria-hidden='true'] {
		display: none;
	}
	@media (max-width: 1100px) {
		.carousel {
			margin: 0 auto;
			padding: var(--s4) 0;
			overflow: hidden;
			display: flex;
			> * {
				flex: 0 0 100%;
			}
			&:hover .group {
				animation-play-state: paused;
			}
		}
		.group {
			gap: var(--s2);
			display: flex;
			padding-right: var(--s2);
			will-change: transform;
			animation: scrolling 15s linear infinite;
			-webkit-mask-image: linear-gradient(
				90deg,
				rgba(0, 0, 0, 0) 0%,
				rgba(0, 0, 0, 1) 10%,
				rgba(0, 0, 0, 1) 90%,
				rgba(0, 0, 0, 0) 100%
			);
		}
		.group[aria-hidden='true'] {
			display: flex;
		}
	}

	@keyframes scrolling {
		0% {
			transform: translateX(0);
		}
		100% {
			transform: translateX(-100%);
		}
	}
</style>

<script>
	import { gsap } from 'gsap';
	import { ScrollTrigger } from 'gsap/ScrollTrigger';
	gsap.registerPlugin(ScrollTrigger);

	document.addEventListener('astro:page-load', () => {
		const cards = document.querySelectorAll('.service-card');
		cards.forEach(card => {
			const desc = card.querySelector('.service-card__desc');
			if (!desc) return;

			const heading = desc.querySelector('h2');
			const paragraph = desc.querySelector('p');
			const targets = [heading, paragraph].filter(Boolean);

			const tl = gsap.timeline({
				ease: 'power2.out',
				scrollTrigger: {
					trigger: card,
					start: 'top 70%',
					toggleActions: 'play none none none',
				},
			});

			if (targets.length) {
				tl.fromTo(
					targets,
					{
						opacity: 0,
						y: 60,
						scale: 0.96,
						filter: 'blur(6px)',
					},
					{
						opacity: 1,
						y: 0,
						scale: 1,
						filter: 'blur(0px)',
						duration: 0.2,
						ease: 'power3.out',
						stagger: 0.08,
					},
				);
			}

			const bullets = desc.querySelectorAll('.service-card__bullet');
			const tlB = gsap.timeline({
				ease: 'power2.out',
				scrollTrigger: {
					trigger: card,
					start: 'top 50%',
					toggleActions: 'play none none none',
				},
			});
			bullets.forEach(bullet => {
				tlB.from(
					bullet,
					{
						opacity: 0,
						y: 30,
						filter: 'blur(4px)',
						duration: 0.2,
					},
					'>',
				);
			});
		});
	});
</script>
